version: '3.8'
services:
  frontend:
    container_name: frontend
    build: ./frontend
    expose:
      - "5173"
    networks:
      - network_app
    depends_on:
      - todo-service
  todo-service:
    container_name: todo-service
    build: ./backend/todo-service
    expose:
      - "5001"   
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - db
    networks:
      - network_app
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: backend

    environment:
      - FLASK_ENV=production
    networks:
      - network_app
    depends_on:
      - db
    restart: unless-stopped

  db:
    container_name: db
    image: postgres:13
    environment:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    expose:
      - "5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - network_app
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5672:5672"       # AMQP
      - "15672:15672"     # Manage UI
      - "15692:15692"     # Prometheus metrics
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    command: >
      bash -c "rabbitmq-plugins enable --offline rabbitmq_prometheus &&
               rabbitmq-server"
    networks:
      - network_app
    restart: unless-stopped
    

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - network_app
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
    volumes:
      - grafana_data:/var/lib/grafana

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - network_app
    restart: unless-stopped


  jenkins:
    container_name: jenkins
    build: ./jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    depends_on:
      - docker-socket-proxy
    networks:
      - network_app
    environment:
      - DOCKER_HOST=tcp://docker-socket-proxy:2375
    restart: unless-stopped

  reverse-proxy:
    build: ./reverse-proxy
    container_name: reverse-proxy
    restart: unless-stopped
    networks:
      - network_app
    ports:
      - "80:80"
    # volumes:
    #   - ./reverse-proxy/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
      - frontend
      - grafana
      - prometheus
      - pgadmin

networks:
  network_app:

volumes:
  pgdata:

from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
CORS(app)
    

app.config['SQLALCHEMY_DATABASE_URI'] = f'postgresql://postgres:password@localhost:5432/tododb'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class Todo(db.Model):
    __tablename__ = 'todos'
    
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=True)
    completed = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    due_date = db.Column(db.DateTime, nullable=True)
    
    def to_dict(self):
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description if self.description else '',
            'completed': self.completed,
            'created_at': self.created_at.isoformat(),
            'due_date': self.due_date.isoformat() if self.due_date else None
        }

@app.route('/api/todos', methods=['GET'])
def get_todos():
    """Get all todos"""
    todos = Todo.query.all()
    return jsonify([todo.to_dict() for todo in todos])

@app.route('/api/todos', methods=['POST'])
def create_todo():
    """Create a new todo"""
    data = request.json
    
    if not data or 'title' not in data:
        return jsonify({"error": "Title is required"}), 400
    
    due_date = None
    if data.get('due_date'):
        try:
            due_date = datetime.fromisoformat(data['due_date'])
        except ValueError:
            return jsonify({"error": "Invalid date format for due_date"}), 400
    
    new_todo = Todo(
        title=data['title'],
        description=data.get('description', ''),
        due_date=due_date
    )
    
    db.session.add(new_todo)
    db.session.commit()
    
    return jsonify(new_todo.to_dict()), 201

@app.route('/api/todos/<int:todo_id>', methods=['GET'])
def get_todo(todo_id):
    """Get a specific todo by ID"""
    todo = Todo.query.get_or_404(todo_id)
    return jsonify(todo.to_dict())

@app.route('/api/todos/<int:todo_id>', methods=['PUT'])
def update_todo(todo_id):
    """Update a todo by ID"""
    todo = Todo.query.get_or_404(todo_id)
    data = request.json
    
    if 'title' in data:
        todo.title = data['title']
    
    if 'description' in data:
        todo.description = data['description']
    
    if 'completed' in data:
        todo.completed = data['completed']
    
    if 'due_date' in data and data['due_date']:
        try:
            todo.due_date = datetime.fromisoformat(data['due_date'])
        except ValueError:
            return jsonify({"error": "Invalid date format for due_date"}), 400
    
    db.session.commit()
    return jsonify(todo.to_dict())

@app.route('/api/todos/<int:todo_id>', methods=['DELETE'])
def delete_todo(todo_id):
    """Delete a todo by ID"""
    todo = Todo.query.get_or_404(todo_id)
    db.session.delete(todo)
    db.session.commit()
    return jsonify(todo.to_dict())

@app.route('/api/todos/completed', methods=['GET'])
def get_completed_todos():
    """Get all completed todos"""
    completed_todos = Todo.query.filter_by(completed=True).all()
    return jsonify([todo.to_dict() for todo in completed_todos])

@app.route('/api/todos/pending', methods=['GET'])
def get_pending_todos():
    """Get all pending todos"""
    pending_todos = Todo.query.filter_by(completed=False).all()
    return jsonify([todo.to_dict() for todo in pending_todos])


@app.cli.command("init-db")
def init_db_command():
    """Clear existing data and create new tables."""
    db.drop_all()
    db.create_all()
    print("Initialized the database.")

# Add sample data
@app.cli.command("seed-db")
def seed_db_command():
    """Add sample data to the database."""
    # Clear existing data
    db.session.query(Todo).delete()
    
    # Add sample todos
    sample_todos = [
        Todo(
            title="Complete PostgreSQL backend",
            description="Implement CRUD API for todos with PostgreSQL",
            completed=True
        ),
        Todo(
            title="Build React frontend",
            description="Create a UI for the todo application",
            completed=False
        ),
        Todo(
            title="Implement Dark Mode",
            description="Add dark mode toggle to the frontend",
            completed=False
        )
    ]
    
    for todo in sample_todos:
        db.session.add(todo)
    
    db.session.commit()
    print("Added sample data to the database.")

if __name__ == "__main__":
    with app.app_context():
        db.create_all()
    app.run(host="0.0.0.0", port=5001)